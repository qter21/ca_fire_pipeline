name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: testpass123
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 pipeline/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 pipeline/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check pipeline/ tests/
    
    - name: Type check with mypy
      run: |
        mypy pipeline/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run unit tests with pytest
      env:
        FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY_TEST }}
        MONGODB_URI: mongodb://admin:testpass123@localhost:27017/test_db?authSource=admin
      run: |
        pytest tests/unit/ -v \
          --cov=pipeline \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml
    
    - name: Run integration tests (not hitting real APIs)
      if: matrix.python-version == '3.12'
      env:
        FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY_TEST }}
        MONGODB_URI: mongodb://admin:testpass123@localhost:27017/test_db?authSource=admin
      run: |
        pytest tests/integration/ -v \
          -m "not slow" \
          --cov=pipeline \
          --cov-append \
          --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: junit/test-results-*.xml

  test-slow:
    runs-on: ubuntu-latest
    # Only run on main branch to avoid excessive API usage
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run slow integration tests
      env:
        FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY_TEST }}
        MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}
      run: |
        pytest tests/integration/ -v \
          -m "slow" \
          --timeout=300
      timeout-minutes: 10

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r pipeline/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install radon
    
    - name: Calculate code complexity
      run: |
        radon cc pipeline/ -a -nb
        radon mi pipeline/ -nb
      continue-on-error: true
    
    - name: Check code quality
      run: |
        echo "Checking for code smells..."
        # Add more quality checks here

